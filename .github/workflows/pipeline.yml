name: Pipeline
on:
  push:
    branches:
    - '*'
  pull_request:
jobs:
  lint:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
    - uses: luizm/action-sh-checker@c6edb3de93e904488b413636d96c6a56e3ad671a # v0.8.0
      env:
        SHFMT_OPTS: -s
      with:
        sh_checker_comment: true

  lint-markdown:
    uses: PurpleBooth/common-pipelines/.github/workflows/markdown-check.yml@main
    
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
    - uses: mig4/setup-bats@af9a00deb21b5d795cabfeaa8d9060410377686d # v1
    - run: sudo apt-get install pandoc
    - run: make test

  commit-checks:
    uses: PurpleBooth/common-pipelines/.github/workflows/commit-check.yml@main
    
  release:
    if: github.ref == 'refs/heads/main'
    needs:
    - lint
    - test
    - commit-checks
    - lint-markdown
    outputs:
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
      with:
        fetch-depth: 0
    - uses: cargo-bins/cargo-binstall@main
      name: Install cargo binstall
    - name: Get tags
      run: git fetch --tags origin
    - shell: bash
      run: cargo binstall --no-confirm --locked cocogitto
    - id: previous_version
      run: |
        cog get-version | tee .version
        echo "previous_version=$( cat .version )"  >> "$GITHUB_OUTPUT"
        rm .version
      shell: bash
    - name: Semver release
      id: release
      run: |
        git config --global user.name "cog-bot"
        git config --global user.email "cog@example.com"
        cog bump --auto
    - id: current_version
      run: |
        cog get-version | tee .version
        echo "current_version=$( cat .version )"  >> "$GITHUB_OUTPUT"
        rm .version
      shell: bash

  upload-release:
    if: needs.release.outputs.current_version != needs.release.outputs.previous_version
    needs:
    - release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      name: Checkout the repository
      with:
        lfs: true
        fetch-depth: 0
        ref: v${{ needs.release.outputs.current_version }}
    - id: get_repository_name
      name: Calculate repository name
      run: echo "REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")" >> "$GITHUB_OUTPUT"
      shell: bash
    - uses: dlavrenuek/conventional-changelog-action@061702b2dfd0d67c9be5779c16c35fde2e6d522c # v1.2.5
      id: changelog
      with:
        from: v${{ needs.release.outputs.previous_version }}
        to: v${{ needs.release.outputs.current_version }}
    - name: Attest binaries
      uses: actions/attest-build-provenance@6149ea5740be74af77f260b9db67e633f6b0a9a1 # v1
      with:
        subject-path: gfmfmt
    - name: Sign binaries
      run: |
       sha256sum "gfmfmt" > "gfmfmt.sha256"
       md5sum "gfmfmt" > "gfmfmt.md5"
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create_release
      uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5 # v1.14.0
      with:
        artifacts: "gfmfmt,gfmfmt.sha256,gfmfmt.md5"
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: ${{ steps.changelog.outputs.body }}
        name: Release v${{ needs.release.outputs.current_version }}
        tag: v${{ needs.release.outputs.current_version }}

  generate-formula:
    if: needs.release.outputs.current_version != needs.release.outputs.previous_version
    needs:
      - release
    name: Generate Homebrew Formula
    runs-on: ubuntu-latest
    steps:
      - uses: PurpleBooth/generate-formula-action@03882ef6068c2622837703f93b664dcc8840d43e # v0.1.14
        with:
          current_version: ${{ needs.release.outputs.current_version }}
          previous_version: ${{ needs.release.outputs.previous_version }}
          committer_token: ${{ secrets.COMMITTER_TOKEN }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
